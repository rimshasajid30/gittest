"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ReusableBlocksRenameHint;

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _dom = require("@wordpress/dom");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _preferences = require("@wordpress/preferences");

/**
 * WordPress dependencies
 */
const PREFERENCE_NAME = 'isResuableBlocksrRenameHintVisible';

function ReusableBlocksRenameHint() {
  const isReusableBlocksRenameHint = (0, _data.useSelect)(select => {
    var _select$get;

    return (_select$get = select(_preferences.store).get('core', PREFERENCE_NAME)) !== null && _select$get !== void 0 ? _select$get : true;
  }, []);
  const ref = (0, _element.useRef)();
  const {
    set: setPreference
  } = (0, _data.useDispatch)(_preferences.store);

  if (!isReusableBlocksRenameHint) {
    return null;
  }

  return (0, _element.createElement)("div", {
    ref: ref,
    className: "reusable-blocks-menu-items__rename-hint"
  }, (0, _element.createElement)("div", {
    className: "reusable-blocks-menu-items__rename-hint-content"
  }, (0, _i18n.__)('Reusable blocks are now called patterns. A synced pattern will behave in exactly the same way as a reusable block.')), (0, _element.createElement)(_components.Button, {
    className: "reusable-blocks-menu-items__rename-hint-dismiss",
    icon: _icons.close,
    iconSize: "16",
    label: (0, _i18n.__)('Dismiss hint'),
    onClick: () => {
      // Retain focus when dismissing the element.
      const previousElement = _dom.focus.tabbable.findPrevious(ref.current);

      previousElement?.focus();
      setPreference('core', PREFERENCE_NAME, false);
    },
    showTooltip: false
  }));
}
//# sourceMappingURL=reusable-block-rename-hint.js.map